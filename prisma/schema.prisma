// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = "Entity"
  classValidation                 = "true"
  fileNamingStyle                 = "kebab"
  noDependencies                  = "false"
  outputType                      = "class"
  prettier                        = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id    String @id(map: "pk_tenant") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code  String @map("display_name") @db.VarChar(50)
  users User[]

  @@unique([code], map: "ixuq_code")
}

model User {
  id           String    @id(map: "pk_user") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  firstName    String    @map("first_name") @db.VarChar(100)
  lastName     String    @map("last_name") @db.VarChar(100)
  email        String    @map("email") @db.VarChar(255)
  password     String    @map("password")
  avatarUrl    String?   @map("avatar_url") @db.VarChar(5000)
  phoneNumber  String    @map("phone_number") @db.VarChar(10)
  gender       String?   @map("gender") @db.VarChar(20)
  dateOfBirth  DateTime? @default(now()) @map("date_of_birth") @db.Timestamptz(6)
  address      String?   @map("address") @db.VarChar(100)
  refreshToken String?   @map("refresh_token") @db.VarChar(100)

  // Relation
  roleId             String               @db.Uuid
  role               Role                 @relation(fields: [roleId], references: [id])
  tenantId           String               @db.Uuid
  tenant             Tenant               @relation(fields: [tenantId], references: [id])
  cvs                CV[]
  companyId          String?              @db.Uuid
  company            Company?             @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "fk_user_to_company")
  jobs               Job[]
  jobBookmarks       JobBookmark[]
  UserToConversation UserToConversation[]

  @@unique([email, tenantId], map: "ixuq_user_email")
  @@map("user")
}

model Role {
  id           String   @id(map: "pk_role") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name         String   @db.VarChar(50)
  displayName  String   @map("display_name") @db.VarChar(50)
  description  String?  @db.VarChar(255)
  canBeUpdated Boolean  @default(true) @map("can_be_updated") @db.Boolean
  canBeDeleted Boolean  @default(true) @map("can_be_deleted") @db.Boolean

  //Relation
  users       User[]
  permissions RoleToPermission[]

  @@map("role")
}

model Permission {
  id           Int      @id(map: "pk_permission") @default(autoincrement()) @map("id") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resourceName String?  @map("resource_name") @db.VarChar(200)
  displayName  String   @map("display_name") @db.VarChar(200)
  description  String?  @map("description") @db.VarChar(255)
  canCreate    Boolean  @default(false) @map("can_create") @db.Boolean
  canRead      Boolean  @default(false) @map("can_read") @db.Boolean
  canUpdate    Boolean  @default(false) @map("can_update") @db.Boolean
  canDelete    Boolean  @default(false) @map("can_delete") @db.Boolean

  //Relation
  roles RoleToPermission[]

  //Index
  @@map("permission")
}

model RoleToPermission {
  roleId       String   @map("role_id") @db.Uuid
  permissionId Int      @map("permission_id") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  //Relation
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "fk_role_to_permission_permission")
  role       Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_to_permission")
}

model CV {
  id        String    @id(map: "pk_cv") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  template  String    @db.VarChar(50)
  image     String?   @db.VarChar(500)
  title     String    @db.VarChar(50)
  fontStyle String?   @map("font_style") @db.VarChar(50)
  fontSize  String?   @map("font_size") @db.VarChar(50)
  color     String?   @map("color") @db.VarChar(50)
  skills    String[]  @db.VarChar(500)
  interests String[]  @db.VarChar(500)
  summary   String?   @map("summary") @db.VarChar(1000)
  state     Boolean   @db.Boolean
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  //Relation
  userId       String          @db.Uuid
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_cv_to_user")
  experiences  Experience[]
  profile      ProfileCV?
  education    Education?
  certificates Certification[]
  languages    Language[]
  jobApply     JobApply[]

  @@map("cv")
}

model ProfileCV {
  id          String   @id(map: "pk_profile_cv") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  firstName   String   @map("first_name") @db.VarChar(100)
  lastName    String   @map("last_name") @db.VarChar(100)
  email       String   @map("email") @db.VarChar(255)
  phoneNumber String   @map("phone_number") @db.VarChar(10)
  gender      String   @map("gender") @db.VarChar(20)
  dateOfBirth DateTime @default(now()) @map("date_of_birth") @db.Timestamptz(6)
  address     String?  @map("address") @db.VarChar(100)
  avatarUrl   String?  @map("avatar_url") @db.VarChar(100)
  facebook    String?  @map("facebook") @db.VarChar(100)
  linkedin    String?  @map("linked_in") @db.VarChar(100)

  //Relation
  CVId String @unique @db.Uuid
  CV   CV     @relation(fields: [CVId], references: [id], onDelete: Cascade, map: "fk_cv_to_profileCV")

  @@map("profile_cv")
}

model Education {
  id           String   @id(map: "pk_education") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  schoolName   String   @map("school_name") @db.VarChar(100)
  location     String   @map("location") @db.VarChar(100)
  state        String   @map("state") @db.VarChar(100)
  fieldOfStudy String   @map("field_of_study") @db.VarChar
  GPA          Decimal? @map("gpa") @db.Decimal(4, 2)
  startDate    DateTime @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate      DateTime @default(now()) @map("end_date") @db.Timestamptz(6)

  //Relation
  CVId String @unique @db.Uuid
  CV   CV     @relation(fields: [CVId], references: [id], onDelete: Cascade, map: "fk_cv_to_education")

  @@map("education")
}

model Experience {
  id          String    @id(map: "pk_experience") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  position    String    @db.VarChar(100)
  company     String    @map("company") @db.VarChar(100)
  location    String    @map("location") @db.VarChar(100)
  state       Boolean?  @db.Boolean
  startDate   DateTime  @default(now()) @map("start_date") @db.Timestamptz(6)
  endDate     DateTime? @default(now()) @map("end_date") @db.Timestamptz(6)
  description String?   @map("description") @db.VarChar(1000)

  //Relation
  CVId String @db.Uuid
  CV   CV     @relation(fields: [CVId], references: [id], onDelete: Cascade, map: "fk_cv_to_experience")

  @@map("experience")
}

model Certification {
  id          String   @id(map: "pk_certification") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  displayName String   @map("display_name") @db.VarChar(50)
  date        DateTime @default(now()) @map("start_date") @db.Timestamptz(6)

  //Relation
  CVId String @db.Uuid
  CV   CV     @relation(fields: [CVId], references: [id], onDelete: Cascade, map: "fk_cv_to_certification")

  @@map("certification")
}

model Language {
  id          String @id(map: "pk_language") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  displayName String @map("display_name") @db.VarChar(50)
  level       String @db.VarChar(50)

  //Relation
  CVId String @db.Uuid
  CV   CV     @relation(fields: [CVId], references: [id], onDelete: Cascade, map: "fk_cv_to_language")

  @@map("language")
}

model Company {
  id              String    @id(map: "pk_company") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  displayName     String    @map("display_name") @db.VarChar(50)
  address         String    @db.VarChar(50)
  logoUrl         String    @db.VarChar(500)
  imageUrl        String?   @db.VarChar(500)
  email           String    @db.VarChar(50)
  phoneNumber     String    @map("phone_number") @db.VarChar(50)
  fieldOfActivity String    @map("filed_of_activity") @db.VarChar(50)
  scale           String    @map("scale") @db.VarChar(100)
  description     String?   @map("description") @db.VarChar(1000)
  website         String?   @map("website") @db.VarChar(50)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz(6)

  users User[]
  jobs  Job[]

  @@map("company")
}

//Job_Offer
model Job {
  id          String    @id(map: "pk_job") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  jobTitle    String    @db.VarChar(50)
  experience  String    @db.VarChar(50)
  salary      String    @db.VarChar(100)
  skills      String[]  @db.VarChar(200)
  jobType     String    @db.VarChar(50)
  education   String?   @db.VarChar(50)
  deadline    DateTime  @default(now()) @map("deadline") @db.Timestamptz(6)
  description String    @db.VarChar(20000)
  status      String    @db.VarChar(50)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user_to_job")

  companyId String  @db.Uuid
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, map: "fk_job_to_company")

  jobApply     JobApply[]
  jobBookmarks JobBookmark[]

  @@map("job")
}

model JobApply {
  id            String @id(map: "pk_job_apply") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  candidateName String @db.VarChar(50)
  email         String @db.VarChar(50)
  status        String @db.VarChar(50)

  jobId String @db.Uuid
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, map: "fk_job_to_job_apply")

  CVId String @db.Uuid
  CV   CV     @relation(fields: [CVId], references: [id], onDelete: Cascade, map: "fk_cv_to_job_apply")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  @@map("job_apply")
}

model JobBookmark {
  id        String    @id(map: "pk_job_bookmarks") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  jobId String @db.Uuid
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, map: "fk_job_to_job_bookmarks")

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_user_to_job_bookmarks")

  @@map("job_bookmark")
}

model Conversation {
  id            String   @id(map: "pk_conversation") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  displayName   String?  @map("display_name") @db.VarChar(50)
  // type          ConversationType @default(CHAT)
  avatarUrl     String?  @map("avatar_url") @db.Text
  lastMessageId String?  @unique @map("last_message_id") @db.Uuid()

  users       UserToConversation[]
  messages    Message[]
  lastMessage Message?             @relation("conversation_last_message", fields: [lastMessageId], references: [id])

  @@map("conversation")
}

model UserToConversation {
  id                String   @id(map: "pk_user_to_conversation") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId    String   @map("conversation_id") @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  displayName       String?  @map("display_name") @db.VarChar(50)
  lastReadMessageId String?  @map("last_read_message_id") @db.Uuid

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastReadMessage Message?     @relation("MessageReadBy", fields: [lastReadMessageId], references: [id], onDelete: Cascade)
  messages        Message[]

  @@unique([conversationId, userId])
  @@map("user_to_conversation")
}

model Message {
  id             String   @id(map: "pk_message") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  content        String   @db.Text
  type           String   @default("TEXT")

  conversation              Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  lastMessageOfConversation Conversation?        @relation("conversation_last_message")
  author                    UserToConversation   @relation(fields: [userId], references: [id], onDelete: Cascade)
  readBy                    UserToConversation[] @relation("MessageReadBy")

  @@map("message")
}
