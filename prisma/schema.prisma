// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = "Entity"
  classValidation                 = "true"
  fileNamingStyle                 = "kebab"
  noDependencies                  = "false"
  outputType                      = "class"
  prettier                        = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id(map: "pk_user") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  firstName   String    @map("first_name") @db.VarChar(100)
  lastName    String    @map("last_name") @db.VarChar(100)
  email       String    @map("email") @db.VarChar(255)
  password    String    @map("password")
  phoneNumber String    @map("phone_number") @db.VarChar(10)
  gender      String?   @map("gender") @db.VarChar(20)
  dateOfBirth DateTime? @default(now()) @map("date_of_birth") @db.Timestamptz(6)
  address     String?   @map("address") @db.VarChar(100)

  // Relation
  role Role @relation(fields: [id], references: [id])

  @@unique([email], map: "ixuq_user_email")
  @@map("user")
}

model Role {
  id           String   @id(map: "pk_role") @default(dbgenerated("uuid_generate_v4()")) @map("id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name         String   @db.VarChar(50)
  displayName  String   @map("display_name") @db.VarChar(50)
  description  String?  @db.VarChar(255)
  canBeUpdated Boolean  @default(true) @map("can_be_updated") @db.Boolean
  canBeDeleted Boolean  @default(true) @map("can_be_deleted") @db.Boolean

  //Relation
  user        User?              @relation
  permissions RoleToPermission[]

  @@map("role")
}

model Permission {
  id           Int      @id(map: "pk_permission") @default(autoincrement()) @map("id") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  resourceName String?  @map("resource_name") @db.VarChar(200)
  displayName  String   @map("display_name") @db.VarChar(200)
  description  String?  @map("description") @db.VarChar(255)
  canCreate    Boolean  @default(false) @map("can_create") @db.Boolean
  canRead      Boolean  @default(false) @map("can_read") @db.Boolean
  canUpdate    Boolean  @default(false) @map("can_update") @db.Boolean
  canDelete    Boolean  @default(false) @map("can_delete") @db.Boolean

  //Relation
  roles RoleToPermission[]

  //Index
  @@map("permission")
}

model RoleToPermission {
  roleId       String   @map("role_id") @db.Uuid
  permissionId Int      @map("permission_id") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  //Relation
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "fk_role_to_permission_permission")
  role       Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_to_permission")
}
